"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getFragment: function() {
        return getFragment;
    },
    offFragmentChange: function() {
        return offFragmentChange;
    },
    onFragmentChange: function() {
        return onFragmentChange;
    },
    resetFragment: function() {
        return resetFragment;
    },
    setFragment: function() {
        return setFragment;
    }
});
var _eventTypes = require("./eventTypes");
var _constants = require("./constants");
function getFragment() {
    var hash = getHash(), fragment = new String(hash); ///
    Object.assign(fragment, {
        getFragment: getFragment,
        setFragment: setFragment,
        resetFragment: resetFragment,
        onFragmentChange: onFragmentChange,
        offFragmentChange: offFragmentChange
    });
    return fragment;
}
function setFragment(fragment) {
    var silently = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
    if (silently) {
        window.removeEventListener(eventType, hashChangeListener);
    }
    var hash = fragment; ///
    window.location.hash = hash;
    if (silently) {
        setTimeout(function() {
            window.addEventListener(eventType, hashChangeListener);
        }, 0);
    }
}
function resetFragment() {
    var silently = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    if (silently) {
        window.removeEventListener(eventType, hashChangeListener);
    }
    var href = location.href;
    var index = href.indexOf(_constants.HASH);
    if (index !== -1) {
        var start = 0, end = index; ///
        href = href.substring(start, end); ///
        history.pushState({}, _constants.EMPTY_STRING, href);
    }
    if (silently) {
        setTimeout(function() {
            window.addEventListener(eventType, hashChangeListener);
        }, 0);
    }
}
function onFragmentChange(fragmentChangeHandler) {
    var element = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
    addFragmentChangeEventListener(fragmentChangeHandler, element);
}
function offFragmentChange(fragmentChangeHandler) {
    var element = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
    removeFragmentChangeEventListener(fragmentChangeHandler, element);
}
Object.defineProperty(globalThis, _constants.FRAGMENT, {
    get: function get() {
        var fragment = getFragment();
        return fragment;
    },
    set: function set(fragment) {
        var silently = false;
        setFragment(fragment, silently);
    }
});
var eventType = _eventTypes.HASHCHANGE_EVENT_TYPE, fragmentChangeEventListeners = [];
window.addEventListener(eventType, hashChangeListener);
function getHash() {
    var location1 = window.location;
    var hash = location1.hash;
    var start = 1;
    hash = hash.substring(start);
    return hash;
}
function hashChangeListener(event) {
    var hash = getHash(), element = window, fragment = hash; ///
    callFragmentChangeHandlers(event, element, fragment);
}
function callFragmentChangeHandlers(event, element, fragment) {
    fragmentChangeEventListeners.forEach(function(fragmentChangeEventListener) {
        var fragmentChangeHandler = fragmentChangeEventListener.fragmentChangeHandler, fragmentChangeHandlerElement = fragmentChangeEventListener.element; ///
        fragmentChangeHandler.call(fragmentChangeHandlerElement, event, element, fragment);
    });
}
function addFragmentChangeEventListener(fragmentChangeHandler, element) {
    var fragmentChangeEventListener = createFragmentChangeEventListener(fragmentChangeHandler, element);
    fragmentChangeEventListeners.push(fragmentChangeEventListener);
    return fragmentChangeEventListener;
}
function removeFragmentChangeEventListener(fragmentChangeHandler, element) {
    var fragmentChangeEventListener = findFragmentChangeEventListener(fragmentChangeHandler, element), index = fragmentChangeEventListeners.indexOf(fragmentChangeEventListener), start = index, deleteCount = 1;
    fragmentChangeEventListeners.splice(start, deleteCount);
    return fragmentChangeEventListener;
}
function createFragmentChangeEventListener(fragmentChangeHandler, element) {
    var fragmentChangeEventListener;
    fragmentChangeEventListener = function() {}; ///
    Object.assign(fragmentChangeEventListener, {
        element: element,
        fragmentChangeHandler: fragmentChangeHandler
    });
    return fragmentChangeEventListener;
}
function findFragmentChangeEventListener(fragmentChangeHandler, element) {
    var fragmentChangeEventListener = fragmentChangeEventListeners.find(function(fragmentChangeEventListener) {
        if (fragmentChangeEventListener.element === element && fragmentChangeEventListener.fragmentChangeHandler === fragmentChangeHandler) {
            return true;
        }
    });
    return fragmentChangeEventListener;
}

//# sourceMappingURL=data:application/json;base64,